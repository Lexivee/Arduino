/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

package cc.arduino.view.git;

import processing.app.git.GitOutputParser;

import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

import java.awt.*;

import static processing.app.I18n.tr;

public class GitDiffForm extends javax.swing.JFrame {

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    oldTextPane = new javax.swing.JTextPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    newTextPane = new javax.swing.JTextPane();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle(tr("Diff"));
    setResizable(false);

    jScrollPane1.setViewportView(oldTextPane);
    oldTextPane.setEditable(false);
    jScrollPane2.setViewportView(newTextPane);
    newTextPane.setEditable(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addGap(25, 25, 25)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGap(18, 18, 18)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
          .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addContainerGap()
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
            .addComponent(jScrollPane2))
          .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextPane newTextPane;
  private javax.swing.JTextPane oldTextPane;
  // End of variables declaration//GEN-END:variables

  private Color addedColor = Color.GREEN;
  private Color deletedColor = Color.PINK;

  private Highlighter.HighlightPainter addedPainter = new DefaultHighlighter.DefaultHighlightPainter(addedColor);
  private Highlighter.HighlightPainter deletedPainter = new DefaultHighlighter.DefaultHighlightPainter(deletedColor);

  public GitDiffForm(GitOutputParser.ParserResult parserResult) {
    initComponents();

    GitOutputParser.DiffText newText = parserResult.getNewText();
    GitOutputParser.DiffText oldText = parserResult.getOldText();

    newTextPane.setText(newText.getText());
    oldTextPane.setText(oldText.getText());

    for (int i = 0; i < newText.getBeginIndexes().size(); i++) {
      highlightNew(
        newText.getBeginIndexes().get(i),
        newText.getEndIndexes().get(i)
      );
    }

    for (int i = 0; i < oldText.getBeginIndexes().size(); i++) {
      highlightOld(
        oldText.getBeginIndexes().get(i),
        oldText.getEndIndexes().get(i)
      );
    }

  }

  public void highlightNew(int begin, int end) {
    try {
      newTextPane.getHighlighter().addHighlight(begin, end, addedPainter);
    } catch (BadLocationException e) {
      e.printStackTrace();
    }
  }

  public void highlightOld(int begin, int end) {
    try {
      oldTextPane.getHighlighter().addHighlight(begin, end, deletedPainter);
    } catch (BadLocationException e) {
      e.printStackTrace();
    }
  }

}
