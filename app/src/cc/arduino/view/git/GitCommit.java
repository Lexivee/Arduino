/*
 * This file is part of Arduino.
 *
 * Copyright 2015 Arduino LLC (http://www.arduino.cc/)
 *
 * Arduino is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

package cc.arduino.view.git;

import processing.app.Base;
import processing.app.Editor;
import processing.app.Sketch;
import processing.app.helpers.OSUtils;
import processing.app.syntax.SketchTextArea;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import static processing.app.I18n.tr;

public class GitCommit extends javax.swing.JFrame {
  private final static Logger LOG = Logger.getLogger(SketchTextArea.class.getName());
  private final Editor editor;


  public GitCommit(Editor editor, Map<String, Object> state) {
    this.editor = editor;

    initComponents();

    Base.setIcon(this);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel commitMessageLabel = new javax.swing.JLabel();
        commitMessageField = new javax.swing.JTextField();
        buttonsContainer = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(tr("Commit"));
        setResizable(false);

        commitMessageLabel.setText(tr("Message:"));

        commitMessageField.setColumns(20);

        cancelButton.setText(tr("Cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonsContainer.add(cancelButton);

        okButton.setText(tr("Ok"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonsContainer.add(okButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(commitMessageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commitMessageField, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                    .addComponent(buttonsContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commitMessageLabel)
                    .addComponent(commitMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(buttonsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    commit();
    dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
  }//GEN-LAST:event_okButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsContainer;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField commitMessageField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

  private void commit() {
    String filePath = editor.getSketch().getMainFilePath();

    StringBuilder commitCommand = new StringBuilder(String.format("git add %s && git commit %s ", filePath, filePath));

    commitCommand.append(" -m ").append(commitMessageField.getText());

    ProcessBuilder processBuilder = new ProcessBuilder("/bin/bash", "-cl", commitCommand.toString());
    processBuilder.redirectErrorStream(true);

    Map<String, String> environment = processBuilder.environment();

    environment.put("HOME", System.getProperty("user.home"));
    environment.put("LANG", "en_US.UTF-8");
    environment.put("GDM_LANG", "en_US.UTF-8");
    environment.put("LANGUAGE", "us");

    processBuilder.directory(editor.getSketch().getFolder());

    try {
      Process process = processBuilder.start();
      try (BufferedReader errStream = new BufferedReader(new InputStreamReader(process.getErrorStream()));
           BufferedReader cin = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
        process.waitFor();

        String line;
        while ((line = errStream.readLine()) != null) {
          System.out.println(line);
          LOG.log(Level.WARNING, line);
        }

        while ((line = cin.readLine()) != null) {
          System.out.println(line);
          LOG.log(Level.WARNING, line);
        }

        if (process.exitValue() == 0) {
          System.out.println("Git command successful!");
          LOG.log(Level.FINE, "Git command successful!");
        }

      }catch (InterruptedException e) {
        System.out.println(e.getMessage());
        LOG.log(Level.WARNING, e.getMessage());
      }

    } catch (IOException e) {
      System.out.println(e.getMessage());
      LOG.log(Level.WARNING, e.getMessage());
    }
  }
}
